#include "header.h" 
#include <time.h> 

struct message{
	char is_pub_sub[10]; //deside if publisher or subscriber
	char mbuf[BUFFER_SIZE]; //message 저장할 버퍼이다.
	char Get_Topic[20]; //pub&sub에서 올 Topic 이름 저장구조체이다.
}sendtopic;

void *pub_message(void *confd)
{
	//랜덤 문자열을 발생시킨다.
	//발생된 문자열을 broker 서버로 보낸다.	

	/* 3. Publisher는 정해진 시간에 맞춰 지속적으로 새로운 메시지를 생성하여 broker에게 전달한다. (6점) */	
	int connectFD=(long long)confd;
	time_t current_time;

	while(true){
		sleep(2);//2 second
 	  	char random;
	
		srand((unsigned)time(NULL));
		//<대문자 65~90
		//소문자 97~122

		random = rand()%(90-65)+65;
		
		time(&current_time);
		//시간을 구한다. 메세지에 타임스탬프를 넣는 부분
	
		printf("%c 메세지를 발행합니다.    [timestamp] : %s \n",random, ctime(&current_time));

		sprintf(sendtopic.mbuf,"%c %s", random, ctime(&current_time));//랜덤으로 발행된 메세지를 저장한다.
	
		printf("connect FD : %d \n",connectFD);
	
		if(write(connectFD, (struct message*)&sendtopic,sizeof(sendtopic))<0){
			printf("write error\n");
			exit(1);
		}
	}
}


int main(int argc, char** argv)
{ 
	if (argc != 1) { 
		printf("Usage: %s IPv4-address\n", argv[0]); 
		return -1; 
	}
	long long connectFD = socket(AF_INET, SOCK_STREAM, 0);
	struct sockaddr_in connectSocket; 
	memset(&connectSocket, 0, sizeof(connectSocket)); 
	connectSocket.sin_family = AF_INET; 
	connectSocket.sin_addr.s_addr=inet_addr("127.00.00.1");
	connectSocket.sin_port = htons(PORT);

	if (connect(connectFD, (struct sockaddr*) &connectSocket, sizeof(connectSocket)) == -1){
	 		 printf("Can not connect.\n"); 
			 return -1; 
	}
	pthread_t pub_thread[1]={0}; 
	int threadresult=0;

	//문자를 생성하는 스레드를 생성한다.
	char temp1[20];
	char temp2[100];
	
	sprintf(sendtopic.is_pub_sub,"%s","pub");
	//pub_sub종류에 pub을 입력한다.
		
	printf("Enter topic name to register :\n "); 
	fflush(stdout);
	scanf("%s",temp1);

	sprintf(sendtopic.Get_Topic,"%s",temp1);

	printf("Topic name to be sent 전송될 Topic %s\n",sendtopic.Get_Topic);		

	threadresult = pthread_create(&pub_thread[0], NULL, pub_message,(void *)connectFD); 
		
	while(true){
			; // hold main thread가 죽지않게 붙잡아 주는 역할.
	}
	close(connectFD); 
	return 0;
}